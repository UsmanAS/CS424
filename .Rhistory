test2
test3 <- table(test2)
test3
test3 <- data.frame(test3)
test3
test3Top <- arrange(test3, test3$Freq)
test3Top
test3Top <- top_n(test3Top, 10)
test3Top
test3Top <- arrange(test3, desc(test3$Freq))
test3Top
test3Top <- arrange(test3, desc(test3$Freq))
test3Top
test3Top <- top_n(test3Top, 10)
test3Top
TagTable <- unlist(strsplit(litter$tags, split = ","))
TagTable <- unlist(strsplit(TagTable, split = " "))
TagTable <- table(TagTable)
TagTable <- data.frame(TagTable)
TagTableTop <- arrange(TagTable, desc(TagTable$Freq))
TagTableTop <- arrange(TagTable, desc(TagTable$freq))
View(TagTable)
View(TagTable)
TagTableTop <- arrange(TagTable, desc(TagTable$Freq))
View(TagTable)
View(TagTable)
TagTableTop <- arrange(TagTable, desc(TagTable$freq))
TTF <- TagTable$Freq
TagTableTop <- arrange(TagTable, desc(TTF))
TagTableTop <- top_n(TagTableTop, 10)
View(TagTableTop)
View(TagTableTop)
ggplot(litter, aes(TagTableTop, frequency(TagTableTop))) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Top 10 Tag Pick Up", x = "Tag", y = "Amount")
ggplot(litter, aes(TagTableTop, frequency(TagTableTop))) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Top 10 Tag Pick Up", x = "Tag", y = "Amount")
ggplot(TagTableTop, aes(TagTableTop, frequency(TagTableTop))) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Top 10 Tag Pick Up", x = "Tag", y = "Amount")
ggplot(TagTableTop, aes_string(TagTableTop, frequency(TagTableTop))) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Top 10 Tag Pick Up", x = "Tag", y = "Amount")
ggplot(aes(TagTableTop, frequency(TagTableTop))) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Top 10 Tag Pick Up", x = "Tag", y = "Amount")
ggplot(TagTableTop, aes_string(TagTableTop, frequency(TagTableTop))) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Top 10 Tag Pick Up", x = "Tag", y = "Amount")
ggplot(TagTableTop, aes(TagTableTop, frequency(TagTableTop))) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Top 10 Tag Pick Up", x = "Tag", y = "Amount")
ggplot(TagTableTop, aes(x = TagTableTop, y = frequency(TagTableTop))) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Top 10 Tag Pick Up", x = "Tag", y = "Amount")
ggplot(litter, aes(TagTable, frequency(TagTable))) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Top 10 Tag Pick Up", x = "Tag", y = "Amount")
TagTable <- table(TagTable)
ggplot(litter, aes(TagTable, frequency(TagTable))) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Top 10 Tag Pick Up", x = "Tag", y = "Amount")
ggplot(litter, aes(TagTable, FReq) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Top 10 Tag Pick Up", x = "Tag", y = "Amount")
ggplot(litter, aes(TagTable, frequency(TagTable))) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Top 10 Tag Pick Up", x = "Tag", y = "Amount")
ggplot(litter, aes(x = TagTable, y = Freq) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Top 10 Tag Pick Up", x = "Tag", y = "Amount")
ggplot(litter, aes(x = TagTable, y = Freq) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Top 10 Tag Pick Up", x = "Tag", y = "Amount")
ggplot(litter, aes(x = TagTable, y = Freq)) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Top 10 Tag Pick Up", x = "Tag", y = "Amount")
ggplot(litter, aes(x = TagTable, y = freq)) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Top 10 Tag Pick Up", x = "Tag", y = "Amount")
ggplot(TagTable, aes(x = TagTable, y = freq)) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Top 10 Tag Pick Up", x = "Tag", y = "Amount")
TagTable <- data.frame(TagTable)
ggplot(TagTable, aes(x = TagTable, y = freq)) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Top 10 Tag Pick Up", x = "Tag", y = "Amount")
ggplot(TagTable, aes(x = TagTable, y = frequency(TagTable))) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Top 10 Tag Pick Up", x = "Tag", y = "Amount")
TagTable <- data.frame(TagTable)
ggplot(TagTable, aes(x = TagTable, y = frequency(TagTable))) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Top 10 Tag Pick Up", x = "Tag", y = "Amount")
ggplot(TagTableTop, aes(x = TagTableTop, y = frequency(TagTableTop))) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Top 10 Tag Pick Up", x = "Tag", y = "Amount")
View(TagTableTop)
View(TagTableTop)
ggplot(TagTable, aes(x = TagTable, y = frequency(TagTable))) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Top 10 Tag Pick Up", x = "Tag", y = "Amount")
TagTable <- unlist(strsplit(litter$tags, split = ","))
TagTable <- unlist(strsplit(TagTable, split = " "))
ggplot(TagTable, aes(x = TagTable, y = frequency(TagTable))) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Top 10 Tag Pick Up", x = "Tag", y = "Amount")
WeekdayTablePickup <- table(WeekdayPickup)
WeekdayTablePickup <- data.frame(WeekdayTablePickup)
ggplot(litter, aes(WeekdayPickup, frequency(WeekdayPickup))) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Weekday Pick Up", x = "Weekday", y = "Amount")
TagTable <- unlist(strsplit(litter$tags, split = ","))
TagTable <- unlist(strsplit(TagTable, split = " "))
TagTable <- table(TagTable)
TagTable <- data.frame(TagTable)
TTF <- TagTable$Freq
TagTableTop <- arrange(TagTable, desc(TTF))
TagTableTop <- top_n(TagTableTop, 10)
TagTableTop
ggplot(TagTableTop)
ggplot(TagTableTop) + geom_bar(fill = "black", stat = "identity")
ggplot(TagTableTop, x, y) + geom_bar(fill = "black", stat = "identity")
ggplot(TagTableTop, x = TagTableTop, y = TTF) + geom_bar(fill = "black", stat = "identity")
ggplot(TagTableTop, aes(x = TagTableTop, y = TTF)) + geom_bar(fill = "black", stat = "identity")
ggplot(TagTableTop, aes_string(x = TagTableTop, y = TTF)) + geom_bar(fill = "black", stat = "identity")
ggplot(litter, aes_string(x = litter$tags, y = TTF)) + geom_bar(fill = "black", stat = "identity")
ggplot(litter, aes_string(x = TagTable, y = TTF)) + geom_bar(fill = "black", stat = "identity")
ggplot(litter, aes(x = TagTable, y = TTF)) + geom_bar(fill = "black", stat = "identity")
ggplot(litter, aes(x = TagTable, y = frequency(TagTable))) + geom_bar(fill = "black", stat = "identity")
ggplot(TagTable, aes(x = TagTable, y = frequency(TagTable))) + geom_bar(fill = "black", stat = "identity")
ggplot(TagTable, aes(TagTable, frequency(TagTable))) + geom_bar(fill = "black", stat = "identity")
ggplot(litter, aes(TagTable, frequency(TagTable))) + geom_bar(fill = "black", stat = "identity")
ggplot(TagTable, aes(TagTable, frequency(TagTable))) + geom_bar(fill = "black", stat = "identity")
ggplot(TagTableTop, aes(TagTableTop, frequency(TagTableTop))) + geom_bar(fill = "black", stat = "identity")
ggplot(TagTable, aes(TagTable, frequency(TagTable))) + geom_bar(fill = "black", stat = "identity") + coord_cartesian(ylim = c(0,100))
ggplot(TagTable, aes(TagTable, frequency(TagTable))) + geom_bar(fill = "black", stat = "identity") + coord_cartesian(ylim = c(0,20))
ggplot(TagTable, aes(TagTable, frequency(TagTable))) + geom_bar(fill = "black", stat = "identity") + coord_cartesian(ylim = c(0,2))
TagTable
View(TagTable)
View(TagTable)
ggplot(TagTable, aes(TagTable, TagTable$Freq)) + geom_bar(fill = "black", stat = "identity") + coord_cartesian(ylim = c(0,20))
t4 <- TagTable$Freq
ggplot(TagTable, aes(TagTable, t4)) + geom_bar(fill = "black", stat = "identity") + coord_cartesian(ylim = c(0,20))
ggplot(TagTable, aes(TagTable, t4)) + geom_bar(fill = "black", stat = "identity")
ggplot(TagTableTop, aes(TagTableTop, TTF)) + geom_bar(fill = "black", stat = "identity")
ggplot(TagTable, aes(TagTableTop, TTF)) + geom_bar(fill = "black", stat = "identity")
ggplot(data = TagTableTop + geom_bar(fill = "black", stat = "identity")
f
ggplot(data = TagTableTop) + geom_bar(fill = "black", stat = "identity")
ggplot(data = TagTableTop)
x <- ggplot(TagTableTop)
x
View(x)
View(x)
x + geom_bar()
x <- ggplot(TagTableTop, aes(TagTableTop$Freq))
x
x + geom_bar()
x <- ggplot(TagTableTop, aes(TTF))
x + geom_bar()
TTF
TagTableTop$Freq
TTTF <- TagTableTop$Freq
x <- ggplot(TagTableTop, aes(TTTF))
x + geom_bar()
ggplot(TagTableTop, aes(TagTableTop, TTTF)) + geom_bar(fill = "black", stat = "identity")
TTTF
TagTableTop
ggplot(TagTableTop, aes(TagTable, TTTF)) + geom_bar(fill = "black", stat = "identity")
source('~/Project1/P1 script.R')
ggplot(TagTableTop, aes(TagTable, TagTableTop$Freq))) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Tag Pick Up", x = "Tag", y = "Amount")
ggplot(TagTableTop, aes(TagTable, TagTable$Freq))) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Tag Pick Up", x = "Tag", y = "Amount")
ggplot(TagTableTop, aes(TagTable, TagTable$Freq))) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Tag Pick Up", x = "Tag", y = "Amount")
TTTF <- TagTableTop$Freq
ggplot(TagTableTop, aes(TagTable, TTTF))) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Tag Pick Up", x = "Tag", y = "Amount")
ggplot(TagTableTop, aes(TagTableTop, TTTF))) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Tag Pick Up", x = "Tag", y = "Amount")
ggplot(litter, aes(WeekdayPickup, frequency(WeekdayPickup))) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Weekday Pick Up", x = "Weekday", y = "Amount")
WeekdayTablePickup <- table(WeekdayPickup)
ggplot(TagTableTop, aes(TagTableTop, TTTF))) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Tag Pick Up", x = "Tag", y = "Amount")
ggplot(TagTableTop, aes(TagTableTop, TTTF)) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Tag Pick Up", x = "Tag", y = "Amount")
ggplot(TagTableTop, aes(TagTable, TTTF)) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Tag Pick Up", x = "Tag", y = "Amount")
TTTF <- TagTableTop$Freq
ggplot(TagTableTop, aes(TagTable, TTTF)) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Tag Pick Up", x = "Tag", y = "Amount")
TagTable <- unlist(strsplit(litter$tags, split = ","))
TagTable <- unlist(strsplit(TagTable, split = " "))
TagTable <- table(TagTable)
TagTable <- data.frame(TagTable)
TTF <- TagTable$Freq
TagTableTop <- arrange(TagTable, desc(TTF))
TagTableTop <- top_n(TagTableTop, 10)
TTTF <- TagTableTop$Freq
ggplot(TagTableTop, aes(TagTable, TTTF)) +
geom_bar(fill = "black", stat = "identity") +
labs(title = "Each Tag Pick Up", x = "Tag", y = "Amount")
View(totalPickup)
View(totalPickup)
ggplot(TagTableTop, aes(TagTable, TTTF)) +
g
totalPickup
x <- as.numeric(totalPickup)
x
totalPickup <- as.numberic(count(litter))
totalPickup <- as.numeric(count(litter))
totalPickup
rsconnect::setAccountInfo(name='usmansiddiqui', token='3364A28D778B965D1ABD131E9DBFC399', secret='1v/zLmnZ0GUKbkLkHHwZ9eR6ukfaskwVCHDuYTDz')
shiny::runApp()
library(rsconnect)
shiny::runApp()
deployApp()
rsconnect::setAccountInfo(name='usmansiddiqui', token='3364A28D778B965D1ABD131E9DBFC399', secret='1v/zLmnZ0GUKbkLkHHwZ9eR6ukfaskwVCHDuYTDz')
deployApp()
deployApp()
source('~/Project1/P1 script.R')
library(shiny); runApp('P1 script.R')
runApp('P1 script.R')
runApp('P1 script.R')
runApp('P1 script.R')
runApp('P1 script.R')
runApp('P1 script.R')
runApp('P1 script.R')
install.packages(fingerprint)
install.packages("fingerprint")
runApp('P1 script.R')
install.packages("fingerprint")
install.packages("fingerprint")
runApp('P1 script.R')
runApp('P1 script.R')
runApp('P1 script.R')
library(shiny); runApp('P1 script.R')
runApp('P1 script.R')
runApp('C:/Users/Usman/Desktop/evlWeatherForR')
runApp('P1 script.R')
View(CountTop)
runApp('P1 script.R')
pickUpDate
runApp('P1 script.R')
TagTableTop
TagTableTop$TagTable
View(TagTableTop)
runApp('P1 script.R')
runApp('P1 script.R')
source('~/GitHub/CS424c/P1 script.R')
#Usman Siddiqui CS 424 Project 1
#Libraries to use
library(lubridate)
library(stringr)
library(plyr)
library(dplyr)
library(ggplot2)
library(fingerprint)
library(shiny)
library(shinydashboard)
library(rsconnect)
#Read in data
litter <- read.table(file = "litterati challenge-65.csv", TRUE, ",")
#Change timestamp into a better timestamp for R and change timezone to Chicago
newTime <- ymd_hms(litter$litterTimestamp)
newTime <- with_tz(newTime, "America/Chicago")
litter$TimeStamp <- newTime
litter$litterTimestamp <- NULL
#Change users without usernames to their userID a nd reinsert data
fixeduser <- sub("litterati-", "", litter$username)
litter$username <- fixeduser
#Recreate the table
str(litter)
#Usman Siddiqui CS 424 Project 1
#Libraries to use
library(lubridate)
library(stringr)
library(plyr)
library(dplyr)
library(ggplot2)
library(fingerprint)
library(shiny)
library(shinydashboard)
library(rsconnect)
#Read in data
litter <- read.table(file = "litterati challenge-65.csv", TRUE, ",")
#Change timestamp into a better timestamp for R and change timezone to Chicago
newTime <- ymd_hms(litter$litterTimestamp)
newTime <- with_tz(newTime, "America/Chicago")
litter$TimeStamp <- newTime
litter$litterTimestamp <- NULL
#Change users without usernames to their userID a nd reinsert data
fixeduser <- sub("litterati-", "", litter$username)
litter$username <- fixeduser
#Recreate the table
str(litter)
#Count the number of entries per user and CountTop contains the top 10 users
countUsers <- plyr::count(litter, vars = "username")
CountTop <- arrange(countUsers,desc(countUsers$freq))
CountTop <- top_n(CountTop, 10)
#Fix the tags making the blank tags as untagged
fixedTags <- litter$tags
fixedTags <- as.character(fixedTags)
fixedTags[fixedTags== ""] <- "untagged"
litter$tags <- fixedTags
#Recreate the table with fixed tags
str(litter)
#Count the total number of litter picked up
totalPickup <- nrow(litter)
#Make a chart of litter picked up each day
pickUpDate <- as.Date(litter$TimeStamp)
Days <- table(cut(pickUpDate, 'day'))
PickUpDateChart <- data.frame(Date=format(as.Date(names(Days)), '%Y-%m-%d'), Frequency = as.vector(Days))
#Change data to be litter picked up each weekday
WeekdayPickup <- weekdays(pickUpDate)
#Change factor and order of Weekdays going from Sunday-Saturday
WeekdayPickup <- factor(WeekdayPickup, levels =
c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
WeekdayPickup[order(WeekdayPickup)]
#Make a chart of the data of litter picked each weekday
WeekdayTablePickup <- table(WeekdayPickup)
WeekdayTablePickup <- data.frame(WeekdayTablePickup)
#Make a chart of the litter picked up per hour
pickUpTimeHour <- hour(litter$TimeStamp)
pickUpTimeHourTable <- table(pickUpTimeHour)
pickUpTimeHourTable <- data.frame(pickUpTimeHourTable)
#Change tags to be in a table per each tag
TagTable <- unlist(strsplit(litter$tags, split = ","))
TagTable <- unlist(strsplit(TagTable, split = " "))
TagTable <- table(TagTable)
TagTable <- data.frame(TagTable)
#Total number of each tag generated
TTF <- TagTable$Freq
#Tags arranged in descending order and then chagned to the top 10
TagTableTop <- arrange(TagTable, desc(TTF))
TagTableTop <- top_n(TagTableTop, 10)
#Frequency of each tag for the Top 10
TTTF <- TagTableTop$Freq
users <- CountTop$username
users <- append(users, "None")
topTags <- TagTableTop$TagTable
topTags <- append(topTags, "None")
topTags
TagTableTop$TagTable
x <- TagTableTop$TagTable
x
x[,10]
x <- append(x, "None")
x
x <- append(x, None)
x <- TagTableTop$TagTable
x <- append(x, None)
x <- append(x, 'None')
x
users
topTags
x <- TagTableTop$TagTable
x
as.character(x)
#Usman Siddiqui CS 424 Project 1
#Libraries to use
library(lubridate)
library(stringr)
library(plyr)
library(dplyr)
library(ggplot2)
library(fingerprint)
library(shiny)
library(shinydashboard)
library(rsconnect)
#Read in data
litter <- read.table(file = "litterati challenge-65.csv", TRUE, ",")
#Change timestamp into a better timestamp for R and change timezone to Chicago
newTime <- ymd_hms(litter$litterTimestamp)
newTime <- with_tz(newTime, "America/Chicago")
litter$TimeStamp <- newTime
litter$litterTimestamp <- NULL
#Change users without usernames to their userID a nd reinsert data
fixeduser <- sub("litterati-", "", litter$username)
litter$username <- fixeduser
#Recreate the table
str(litter)
#Count the number of entries per user and CountTop contains the top 10 users
countUsers <- plyr::count(litter, vars = "username")
CountTop <- arrange(countUsers,desc(countUsers$freq))
CountTop <- top_n(CountTop, 10)
#Fix the tags making the blank tags as untagged
fixedTags <- litter$tags
fixedTags <- as.character(fixedTags)
fixedTags[fixedTags== ""] <- "untagged"
litter$tags <- fixedTags
#Recreate the table with fixed tags
str(litter)
#Count the total number of litter picked up
totalPickup <- nrow(litter)
#Make a chart of litter picked up each day
pickUpDate <- as.Date(litter$TimeStamp)
Days <- table(cut(pickUpDate, 'day'))
PickUpDateChart <- data.frame(Date=format(as.Date(names(Days)), '%Y-%m-%d'), Frequency = as.vector(Days))
#Change data to be litter picked up each weekday
WeekdayPickup <- weekdays(pickUpDate)
#Change factor and order of Weekdays going from Sunday-Saturday
WeekdayPickup <- factor(WeekdayPickup, levels =
c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
WeekdayPickup[order(WeekdayPickup)]
#Make a chart of the data of litter picked each weekday
WeekdayTablePickup <- table(WeekdayPickup)
WeekdayTablePickup <- data.frame(WeekdayTablePickup)
#Make a chart of the litter picked up per hour
pickUpTimeHour <- hour(litter$TimeStamp)
pickUpTimeHourTable <- table(pickUpTimeHour)
pickUpTimeHourTable <- data.frame(pickUpTimeHourTable)
#Change tags to be in a table per each tag
TagTable <- unlist(strsplit(litter$tags, split = ","))
TagTable <- unlist(strsplit(TagTable, split = " "))
TagTable <- table(TagTable)
TagTable <- data.frame(TagTable)
#Total number of each tag generated
TTF <- TagTable$Freq
#Tags arranged in descending order and then chagned to the top 10
TagTableTop <- arrange(TagTable, desc(TTF))
TagTableTop <- top_n(TagTableTop, 10)
#Frequency of each tag for the Top 10
TTTF <- TagTableTop$Freq
users <- CountTop$username
users <- append(users, "None")
topTags <- as.character(TagTableTop$TagTable)
topTags <- append(topTags, "None")
topTags
source('~/GitHub/CS424c/P1 script.R')
runApp('P1 script.R')
View(CountTop)
countUsersTag <- plyr::count(litter[litter$tags == "julieta"], vars = "username")
countUsersTag <- plyr::count(litter[litter$tags == "untagged"], vars = "username")
countUsersTag <- plyr::count(litter[litter$tags == "untagged"], vars = "username")
s <- litter
s <- s[s$tags == "untagged"]
litter$tags
runApp('P1 script.R')
countUsersTag <- plyr::count(litter[litter$tags == input$tag], vars = "username")
countUsersTag <- plyr::count(litter[litter$tags == "plastic"], vars = "username")
runApp('P1 script.R')
runApp('P1 script.R')
z <- litter[litter$tags == "untagged"]
z <- litter$tags[litter$tags == "untagged"]
z
runApp('P1 script.R')
#Change tags to be in a table per each tag
TagTable <- unlist(strsplit(litter$tags, split = ","))
TagTable <- unlist(strsplit(TagTable, split = " "))
TagTable <- table(TagTable)
TagTable <- data.frame(TagTable)
TagTable
runApp('P1 script.R')
234
runApp('P1 script.R')
TagTableTag <- unlist(strsplit(litter$tags, split = ","))
TagTableTag <- unlist(strsplit(TagTableTag, split = " "))
TagTableTag <- table(TagTableTag)
TagTableTag <- data.frame(TagTableTag)
TagTableTag$TagTable <- TagTableTag$TagTableTag
TagTableTag$TagTableTag <- NULL
TagTableTagTop <- merge(TagTableTag,TagTableTop, by="TagTable")
TagTableTagTop <- TagTableTagTop$TagTable[TagTableTagTop$TagTable == "untagged"]
TagTableTagTop
TagTableTag <- unlist(strsplit(litter$tags, split = ","))
TagTableTag <- unlist(strsplit(TagTableTag, split = " "))
TagTableTag <- table(TagTableTag)
TagTableTag <- data.frame(TagTableTag)
TagTableTag$TagTable <- TagTableTag$TagTableTag
TagTableTag$TagTableTag <- NULL
TagTableTagTop <- merge(TagTableTag,TagTableTop, by="TagTable")
TagTableTagTop <- TagTableTagTop[TagTableTagTop$TagTable == "untagged"]
TagTableTagTop
TagTableTagTop["tag"]
TagTableTagTop["tag",]
TagTableTagTop["untagged",]
TagTableTagTop
TagTableTagTop[,]
TagTableTagTop[TagTableTagTop$TagTable == "untagged",]
runApp('P1 script.R')
View(TagTableTag)
View(CountTop)
View(CountTop)
TagTable
x <- tagTable["s",]
x <- TagTable["s",]
x
x <- TagTable["s", exact = FALSE]
runApp('P1 script.R')
install.packages(leaflet)
install.packages("leaflet")
install.packages("leaflet")
runApp('P1 script.R')
View(litter)
runApp('P1 script.R')
runApp('P1 script.R')
runApp('P1 script.R')
